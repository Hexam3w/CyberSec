>John the Ripper<

>Good website for passwords/dictionary lists<
https://github.com/danielmiessler/SecLists

>Syntax<

john [options] [file path]

    john: Invokes the John the Ripper program
    [options]: Specifies the options you want to use
    [file path]: The file containing the hash you’re trying to crack

john --wordlist=[path to wordlist] [path to file]

    --wordlist=: Specifies using wordlist mode, reading from the file that you supply in the provided path
    [path to wordlist]: The path to the wordlist you’re using, as described in the previous task

john --format=[format] --wordlist=[path to wordlist] [path to file]

    --format=: This is the flag to tell John that you’re giving it a hash of a specific format and to use the following format to crack it
    [format]: The format that the hash is in
when specifying the format if it is a standard one like MD5 we need to use the prefix -raw
in case of doubt, we can use john --list=formats

john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt

>Hash Identifiers<
Website: https://hashes.com/en/tools/hash_identifier
hash-identifier - a Python tool

>Linux Passwords Crack<

To use John to crack these passwords we need to give the program more information than just the file in /etc/shadow

if we join /etc/shadow and combine it with /etc/passwd we call this unshadowing.
There is a tool in john called unshadow for this and the syntax is as follows:

unshadow [path to passwd] [path to shadow]

    unshadow: Invokes the unshadow tool
    [path to passwd]: The file that contains the copy of the /etc/passwd file you’ve taken from the target machine
    [path to shadow]: The file that contains the copy of the /etc/shadow file you’ve taken from the target machine

>Single Crack Mode<

This mode uses information provided in the username to try and work out passwords

In the case of username Alice john would build a possible password by trying Alice1 Alice2 AlIcE ...

John can also look at the 5th field of /etc/shadow and /etc/passwd . This field is called GECOS field and has information about the user. this information can also be used in the password crack attempt

To use the Single Crack mode we need to tell john to do so and we use the following syntax:
--single

A Note on File Formats in Single Crack Mode:

If you’re cracking hashes in single crack mode, you need to change the file format that you’re feeding John for it to understand what data to create a wordlist from. You do this by prepending the hash with the username that the hash belongs to, so according to the above example, we would change the file hashes.txt

From 1efee03cdcb96d90ad48ccc7b8666033

To mike:1efee03cdcb96d90ad48ccc7b8666033

>Custom rules<

Some websites require certain password complexities. We can add custom rules to account for these

For example, we can exploit the fact that most users when faced with password complexity choose the first letter that  has capital numbers after the word followed by a special character.

We can use this knowledge to create dynamic passwords from our lists.

>How to create custom rules?<
Custom rules are defined in the john.conf file. It is usually located in /etc/john/john.conf

We can use the following to define the rule name: [List.Rules:rulename]


Some rules syntax


    Az: Takes the word and appends it with the characters you define
    A0: Takes the word and prepends it with the characters you define
    c: Capitalises the character positionally

    [0-9]: Will include numbers 0-9
    [0]: Will include only the number 0
    [A-z]: Will include both upper and lowercase
    [A-Z]: Will include only uppercase letters
    [a-z]: Will include only lowercase letters


    [a]: Will include only a
    [!£$%@]: Will include the symbols !, £, $, %, and @

Rule example:

cAz"[0-9] [!£$%@]"

>Cracking Password protected zip files<

First, we need to convert the zip to a file john understands

>Zip2John<
Similar to unshadow we use a tool called zip2john to convert the file

Syntax:
zip2john [options] [zip file] > [output file]


    [options]: Allows you to pass specific checksum options to zip2john; this shouldn’t often be necessary
    [zip file]: The path to the Zip file you wish to get the hash of
    >: This redirects the output from this command to another file
    [output file]: This is the file that will store the output

>Rar2John<
for this, we can use a similar process
rar2john [rar file] > [output file]

>Cracking SSH Key Passwords<
You can authenticate to SSH with a user and password but also with your private key, id_rsa, This key is protected by a password and we will need john to crack it.

>SSH2John<
converts id_rsa to a hash format.

Syntax:
ssh2john [id_rsa private key file] > [output file]

Only Kali we must swap ssh2john to python /usr/share/john/ssh2john.py in case we don't have it installed.

